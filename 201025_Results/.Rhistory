"En un vehículo de aplicación Uber, Cabify,",
"En una motocicleta") ~ "Transporte privado o individual",
# Entorno peatonal
p39 %in% c("Mientras caminaba",
"Entre el paradero y la casa") ~ "Entorno peatonal / calle",
# Otro
p39 == "Otro" ~ "Otro lugar",
TRUE ~ NA_character_
)
)
###############################################################################
## Actualizar diccionario de variables
###############################################################################
diccionario_clasificado <- diccionario_clasificado %>%
add_row(
codigo = "p39_lugar_agregado",
descripcion = "Lugar donde ocurrió la situación (categorías agrupadas)",
modulo = "Módulo 4: Experiencias de acoso, inseguridad y VBG"
)
###############################################################################
## Guardar diccionario y dataset
###############################################################################
writexl::write_xlsx(dataset, "output/clean_cali_dataset_21102025.xlsx")
writexl::write_xlsx(diccionario_clasificado, "output/diccionario_cali.xlsx")
# ruta
setwd("C:/Users/Portatil/Desktop/Natura/201025_Results/")
# cargar datos
dataset = readxl::read_excel("output/clean_cali_dataset_21102025.xlsx")
diccionario_clasificado = readxl::read_excel("output/diccionario_cali.xlsx")
# variables del modulo 1
vars_m1 = diccionario_clasificado %>% filter(modulo == "Módulo 1: Socio-Demográfico")
# variable de control
dataset$p40
# Por simplicidad, usamos solo hombre y mujer
dataset = dataset %>% filter(p40 %in% c("Mujer", "Hombre"))
df_m1 = dataset %>% select(vars_m1$codigo)
# Variables a describir
cat_to_describe <- c("edad_r2", "pais", "p3_agregado", "p5_agregado",
"p7_agregado", "p8_agregado", "p9_estrato3")
cont_to_describe <- c("p1edad")
# Ejecutar función
tabla_m1 <- describe_by_gender(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
gender_var = "p40"
)
# Mostrar tabla final
print(tabla_m1)
# Mostrar tabla final
print(tabla_m1)
##################################
## Módulo 1 por género          ##
##################################
# ruta
setwd("C:/Users/Portatil/Desktop/Natura/201025_Results/")
# cargar datos
dataset = readxl::read_excel("output/clean_cali_dataset_21102025.xlsx")
diccionario_clasificado = readxl::read_excel("output/diccionario_cali.xlsx")
# variables del modulo 1
vars_m1 = diccionario_clasificado %>% filter(modulo == "Módulo 1: Socio-Demográfico")
# variable de control
dataset$p40
# Por simplicidad, usamos solo hombre y mujer
dataset = dataset %>% filter(p40 %in% c("Mujer", "Hombre"))
df_m1 = dataset %>% select(vars_m1$codigo)
# Variables a describir
cat_to_describe <- c("edad_r2", "pais", "p3_agregado", "p5_agregado",
"p7_agregado", "p8_agregado", "p9_estrato3")
cont_to_describe <- c("p1edad")
# Ejecutar función
tabla_m1 <- describe_by_gender(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
gender_var = "p40"
)
# Mostrar tabla final
print(tabla_m1)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m1, "output/mod1_by_gender.xlsx")
source("aux_functions/aux_summary.R")
##############################################
## FUNCIÓN GENERAL DE DESCRIPCIÓN POR GÉNERO
##############################################
library(dplyr)
library(tidyr)
library(stats)
library(rlang)
describe_by_gender <- function(data, vars_cat, vars_cont, gender_var = "p40",
diccionario = NULL) {
# Crear vector de etiquetas (si se pasa el diccionario)
labels <- NULL
if (!is.null(diccionario)) {
labels <- diccionario %>%
select(codigo, descripcion) %>%
deframe()
}
results <- list()
# --- Variables categóricas ---
for (v in vars_cat) {
tab <- table(data[[v]], data[[gender_var]])
prop <- prop.table(tab, 2) * 100
df_cat <- data.frame(
Variable = v,
Categoria = rownames(tab),
Hombre = sprintf("%d (%.1f%%)", tab[, "Hombre"], prop[, "Hombre"]),
Mujer = sprintf("%d (%.1f%%)", tab[, "Mujer"], prop[, "Mujer"]),
stringsAsFactors = FALSE
)
# Test Chi-cuadrado (solo si hay más de una categoría)
pval <- if (nrow(tab) > 1) suppressWarnings(chisq.test(tab)$p.value) else NA
df_cat$p_value <- round(pval, 4)
df_cat$Label <- if (!is.null(labels[[v]])) labels[[v]] else v
results[[v]] <- df_cat
}
# --- Variables continuas ---
for (v in vars_cont) {
df <- data %>%
group_by(!!sym(gender_var)) %>%
summarise(
Median = median(.data[[v]], na.rm = TRUE),
Q1 = quantile(.data[[v]], 0.25, na.rm = TRUE),
Q3 = quantile(.data[[v]], 0.75, na.rm = TRUE)
) %>%
mutate(Resumen = sprintf("%.1f (%.1f–%.1f)", Median, Q1, Q3)) %>%
select(!!sym(gender_var), Resumen) %>%
pivot_wider(names_from = !!sym(gender_var), values_from = Resumen)
# Test Mann–Whitney o Kruskal–Wallis
k <- n_distinct(data[[gender_var]][!is.na(data[[v]])])
if (k == 2) {
test <- wilcox.test(data[[v]] ~ data[[gender_var]], exact = FALSE)
} else {
test <- kruskal.test(data[[v]] ~ as.factor(data[[gender_var]]))
}
pval <- round(test$p.value, 4)
resumen <- df %>%
mutate(
Variable = v,
Categoria = "",
p_value = pval,
Label = if (!is.null(labels[[v]])) labels[[v]] else v
) %>%
select(Variable, Label, Categoria, Hombre, Mujer, p_value)
results[[v]] <- resumen
}
# Unir resultados
final <- bind_rows(results)
final <- final %>%
select(Variable, Label, Categoria, Hombre, Mujer, p_value)
return(final)
}
# Ejecutar función
tabla_m1 <- describe_by_gender(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
gender_var = "p40",
diccionario = diccionario_clasificado
)
head(tabla_m1)
# Mostrar tabla final
print(tabla_m1)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m1, "output/by_gender/mod1_by_gender.xlsx")
dataset$p9_estrato3
# Ejecutar función
tabla_m2 <- describe_by_gender(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p9_estrato3",
diccionario = diccionario_clasificado
)
head(tabla_m2)
##############################################
## FUNCIÓN GENERAL DE DESCRIPCIÓN POR GÉNERO
##############################################
library(dplyr)
library(tidyr)
library(stats)
library(rlang)
describe_by_gender <- function(data, vars_cat, vars_cont, control_var = "p40",
diccionario = NULL) {
# Crear vector de etiquetas (si se pasa el diccionario)
labels <- NULL
if (!is.null(diccionario)) {
labels <- diccionario %>%
select(codigo, descripcion) %>%
deframe()
}
results <- list()
# --- Variables categóricas ---
for (v in vars_cat) {
tab <- table(data[[v]], data[[control_var]])
prop <- prop.table(tab, 2) * 100
df_cat <- data.frame(
Variable = v,
Categoria = rownames(tab),
Hombre = sprintf("%d (%.1f%%)", tab[, "Hombre"], prop[, "Hombre"]),
Mujer = sprintf("%d (%.1f%%)", tab[, "Mujer"], prop[, "Mujer"]),
stringsAsFactors = FALSE
)
# Test Chi-cuadrado (solo si hay más de una categoría)
pval <- if (nrow(tab) > 1) suppressWarnings(chisq.test(tab)$p.value) else NA
df_cat$p_value <- round(pval, 4)
df_cat$Label <- if (!is.null(labels[[v]])) labels[[v]] else v
results[[v]] <- df_cat
}
# --- Variables continuas ---
for (v in vars_cont) {
df <- data %>%
group_by(!!sym(control_var)) %>%
summarise(
Median = median(.data[[v]], na.rm = TRUE),
Q1 = quantile(.data[[v]], 0.25, na.rm = TRUE),
Q3 = quantile(.data[[v]], 0.75, na.rm = TRUE)
) %>%
mutate(Resumen = sprintf("%.1f (%.1f–%.1f)", Median, Q1, Q3)) %>%
select(!!sym(control_var), Resumen) %>%
pivot_wider(names_from = !!sym(control_var), values_from = Resumen)
# Test Mann–Whitney o Kruskal–Wallis
k <- n_distinct(data[[control_var]][!is.na(data[[v]])])
if (k == 2) {
test <- wilcox.test(data[[v]] ~ data[[control_var]], exact = FALSE)
} else {
test <- kruskal.test(data[[v]] ~ as.factor(data[[control_var]]))
}
pval <- round(test$p.value, 4)
resumen <- df %>%
mutate(
Variable = v,
Categoria = "",
p_value = pval,
Label = if (!is.null(labels[[v]])) labels[[v]] else v
) %>%
select(Variable, Label, Categoria, Hombre, Mujer, p_value)
results[[v]] <- resumen
}
# Unir resultados
final <- bind_rows(results)
final <- final %>%
select(Variable, Label, Categoria, Hombre, Mujer, p_value)
return(final)
}
# Ejecutar función
tabla_m2 <- describe_by_gender(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p9_estrato3",
diccionario = diccionario_clasificado
)
levels(as.factor(dataset$p9_estrato3))
##############################################
## FUNCIÓN GENERAL DE DESCRIPCIÓN POR GRUPO
## Compatible con cualquier variable de control
##############################################
library(dplyr)
library(tidyr)
library(stats)
library(rlang)
describe_by_group <- function(data, vars_cat, vars_cont,
control_var,
diccionario = NULL) {
# Crear vector de etiquetas (si se pasa el diccionario)
labels <- NULL
if (!is.null(diccionario)) {
labels <- diccionario %>%
select(codigo, descripcion) %>%
deframe()
}
# Asegurar que la variable de control es factor
data[[control_var]] <- as.factor(data[[control_var]])
control_levels <- levels(data[[control_var]])
n_groups <- length(control_levels)
results <- list()
# --- VARIABLES CATEGÓRICAS ---
for (v in vars_cat) {
tab <- table(data[[v]], data[[control_var]])
prop <- prop.table(tab, 2) * 100
# Crear tabla con n(%) por grupo dinámicamente
df_cat <- as.data.frame.matrix(tab)
df_prop <- as.data.frame.matrix(round(prop, 1))
df_display <- data.frame(
Variable = v,
Categoria = rownames(tab),
stringsAsFactors = FALSE
)
# Agregar columnas dinámicas (una por categoría del control)
for (g in control_levels) {
df_display[[g]] <- sprintf("%d (%.1f%%)",
tab[, g], prop[, g])
}
# Test chi-cuadrado
pval <- if (nrow(tab) > 1) suppressWarnings(chisq.test(tab)$p.value) else NA
df_display$p_value <- round(pval, 4)
df_display$Label <- if (!is.null(labels[[v]])) labels[[v]] else v
results[[v]] <- df_display
}
# --- VARIABLES CONTINUAS ---
for (v in vars_cont) {
# Calcular mediana y rango intercuartílico por grupo
df <- data %>%
group_by(!!sym(control_var)) %>%
summarise(
Median = median(.data[[v]], na.rm = TRUE),
Q1 = quantile(.data[[v]], 0.25, na.rm = TRUE),
Q3 = quantile(.data[[v]], 0.75, na.rm = TRUE)
) %>%
mutate(Resumen = sprintf("%.1f (%.1f–%.1f)", Median, Q1, Q3)) %>%
select(!!sym(control_var), Resumen) %>%
pivot_wider(names_from = !!sym(control_var), values_from = Resumen)
# Test estadístico según número de grupos
if (n_groups == 2) {
test <- wilcox.test(data[[v]] ~ data[[control_var]], exact = FALSE)
} else {
test <- kruskal.test(data[[v]] ~ as.factor(data[[control_var]]))
}
pval <- round(test$p.value, 4)
resumen <- df %>%
mutate(
Variable = v,
Categoria = "",
p_value = pval,
Label = if (!is.null(labels[[v]])) labels[[v]] else v
) %>%
relocate(Variable, Label, Categoria)
results[[v]] <- resumen
}
# --- UNIR RESULTADOS ---
final <- bind_rows(results)
# Asegurar columnas en orden (Variable, Label, Categoria, grupos..., p-value)
final <- final %>%
relocate(Variable, Label, Categoria)
# Asegurar que p-value es la última columna
pval_col <- which(names(final) == "p_value")
if (pval_col < ncol(final)) {
final <- final %>% select(-p_value, everything(), p_value)
}
return(final)
}
# Ejecutar función
tabla_m1 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p40",   # variable de control: género
diccionario = diccionario_clasificado
)
head(tabla_m1)
# Mostrar tabla final
print(tabla_m1)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m1, "output/by_gender/v2_mod1_by_gender.xlsx")
# Ejecutar función
tabla_m2 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p9_estrato3",
diccionario = diccionario_clasificado
)
head(tabla_m2)
# Mostrar tabla final
print(tabla_m2)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m2, "output/m1/mod1_by_ses.xlsx")
dataset$p17_modo_agregado
# Ejecutar función
tabla_m3 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p17_modo_agregado",
diccionario = diccionario_clasificado
)
head(tabla_m3)
# Mostrar tabla final
print(tabla_m3)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m3, "output/m1/mod1_by_travel_mode.xlsx")
source("aux_functions/aux_summary.R")
##################################
## Módulo 1 por género          ##
##################################
# ruta
setwd("C:/Users/Portatil/Desktop/Natura/201025_Results/")
# cargar datos
dataset = readxl::read_excel("output/clean_cali_dataset_21102025.xlsx")
diccionario_clasificado = readxl::read_excel("output/diccionario_cali.xlsx")
# variables del modulo 1
vars_m1 = diccionario_clasificado %>% filter(modulo == "Módulo 1: Socio-Demográfico")
# variable de control
dataset$p40
# Por simplicidad, usamos solo hombre y mujer
dataset = dataset %>% filter(p40 %in% c("Mujer", "Hombre"))
df_m1 = dataset %>% select(vars_m1$codigo)
# Variables a describir
cat_to_describe <- c("edad_r2", "pais", "p3_agregado", "p5_agregado",
"p7_agregado", "p8_agregado", "p9_estrato3", "p40")
cont_to_describe <- c("p1edad")
# Ejecutar función
tabla_m1 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p40",   # variable de control: género
diccionario = diccionario_clasificado
)
head(tabla_m1)
# Mostrar tabla final
print(tabla_m1)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m1, "output/m1/v2_mod1_by_gender.xlsx")
##################################
## Módulo 1 por SES             ##
##################################
# Ejecutar función
tabla_m2 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p9_estrato3",
diccionario = diccionario_clasificado
)
head(tabla_m2)
# Mostrar tabla final
print(tabla_m2)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m2, "output/m1/mod1_by_ses.xlsx")
##################################
## Módulo 1 por travel mode     ##
##################################
# Ejecutar función
tabla_m3 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p17_modo_agregado",
diccionario = diccionario_clasificado
)
head(tabla_m3)
# Mostrar tabla final
print(tabla_m3)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m3, "output/m1/mod1_by_travel_mode.xlsx")
source("aux_functions/aux_summary.R")
##################################
## Módulo 1 por género          ##
##################################
# ruta
setwd("C:/Users/Portatil/Desktop/Natura/201025_Results/")
# cargar datos
dataset = readxl::read_excel("output/clean_cali_dataset_21102025.xlsx")
diccionario_clasificado = readxl::read_excel("output/diccionario_cali.xlsx")
# variables del modulo 1
vars_m1 = diccionario_clasificado %>% filter(modulo == "Módulo 1: Socio-Demográfico")
# variable de control
dataset$p40
# Por simplicidad, usamos solo hombre y mujer
dataset = dataset %>% filter(p40 %in% c("Mujer", "Hombre"))
df_m1 = dataset %>% select(vars_m1$codigo)
# Variables a describir
cat_to_describe <- c("edad_r2", "pais", "p3_agregado", "p5_agregado",
"p7_agregado", "p8_agregado", "p9_estrato3", "p40")
cont_to_describe <- c("p1edad")
# Ejecutar función
tabla_m1 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p40",   # variable de control: género
diccionario = diccionario_clasificado
)
head(tabla_m1)
# Mostrar tabla final
print(tabla_m1)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m1, "output/m1/21102025_v2_mod1_by_gender.xlsx")
##################################
## Módulo 1 por SES             ##
##################################
# Ejecutar función
tabla_m2 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p9_estrato3",
diccionario = diccionario_clasificado
)
head(tabla_m2)
# Mostrar tabla final
print(tabla_m2)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m2, "output/m1/21102025_mod1_by_ses.xlsx")
##################################
## Módulo 1 por travel mode     ##
##################################
# Ejecutar función
tabla_m3 <- describe_by_group(
data = dataset,
vars_cat = cat_to_describe,
vars_cont = cont_to_describe,
control_var = "p17_modo_agregado",
diccionario = diccionario_clasificado
)
head(tabla_m3)
# Mostrar tabla final
print(tabla_m3)
# Guardar en Excel si quieres
writexl::write_xlsx(tabla_m3, "output/m1/21102025_mod1_by_travel_mode.xlsx")
