vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
# Mantén solo Medellín y géneros Hombre/Mujer
base_med <- dataset %>%
mutate(
p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)
) %>%
filter(p2_1_1 == "Medellín", p40 %in% c("Hombre","Mujer")) %>%
# ya vienen agregadas: dejamos un único valor por género (si hay duplicados idénticos, se colapsan)
distinct(p40, across(all_of(vars_tiempo)))
# -------- loop: 2 mapas (H/M) por cada variable -------
for (v in vars_tiempo) {
titulo_var <- label_de(v)
for (g in c("Hombre","Mujer")) {
# tomar el valor tal cual (sin promediar)
val <- base_med %>% filter(p40 == g) %>% pull(all_of(v))
if (length(val) == 0) {
message("No hay valor para ", v, " en ", g, ". Se omite.")
next
}
val <- as.numeric(val[1])
# crear un sf con una sola fila y el valor
pinta <- med_sf %>% mutate(valor = val)
p <- ggplot(pinta) +
geom_sf(aes(fill = valor), color = NA) +
scale_fill_viridis_c(option = "mako", direction = -1,
name = "Minutos", na.value = "grey90") +
labs(title = paste0(titulo_var, " — Medellín (", g, ")"),
subtitle = "Valor reportado a nivel ciudad (sin agregar)") +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank())
ggsave(
filename = paste0(v, "_Medellin_", ifelse(g=="Hombre","Hombres","Mujeres"), ".png"),
plot = p, width = 7.5, height = 6.2, dpi = 300, bg = "transparent"
)
}
}
######################################################
## Medellín: choropleth por colores con facet H/M   ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
library(tidyr)
library(stringr)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
# Label desde diccionario
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# Contorno Medellín (disolver a un solo polígono)
shp_med   <- sf::st_read("ZONAS SIT.shp", quiet = TRUE)
med_union <- sf::st_union(shp_med)
med_sf    <- sf::st_sf(geometry = sf::st_sfc(med_union), crs = sf::st_crs(shp_med))
# Variables y filtros
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
stopifnot(all(vars_tiempo %in% names(dataset)))
base_med <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 == "Medellín", p40 %in% c("Hombre","Mujer")) %>%
distinct(p40, across(all_of(vars_tiempo)))
# Paleta elegida
pal_option <- "rocket"  # "turbo" o "mako"
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# Construir un sf replicando el contorno por género y anexando el valor
vals <- base_med %>% select(p40, all_of(v)) %>% rename(valor = !!v)
pinta <- med_sf %>%
mutate(key = 1) %>%
left_join(vals %>% mutate(key = 1), by = "key") %>%
select(-key)
p <- ggplot(pinta) +
geom_sf(aes(fill = valor), color = "white", size = 0.2) +
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1,
name = "Minutos", na.value = "grey90") +
labs(title = paste0(titulo_var, " — Medellín"),
subtitle = "Valor reportado a nivel ciudad (sin promediar)") +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank(),
strip.text = element_text(face = "bold"))
ggsave(
filename = paste0(v, "_Medellin_facet_HM_colores.png"),
plot = p, width = 9, height = 6.5, dpi = 300, bg = "transparent"
)
}
######################################################
## Medellín por COMUNA, facet H/M (choropleth)      ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
library(stringr)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# Shape con comunas de Medellín: ZONAS SIT debe tener un campo que matchea p19comuna
shp_med <- sf::st_read("ZONAS SIT.shp", quiet = TRUE)
# Detecta el campo que corresponde a p19comuna en el SHP (ajusta si tu atributo se llama distinto)
cand <- c("p19comuna","COMUNA","Comuna","NOMBRE","NOM_COMUNA","NOMBRE_COM")
campo_comuna_shp <- cand[cand %in% names(shp_med)][1]
if (is.na(campo_comuna_shp)) stop("No encuentro en el SHP un campo equivalente a p19comuna.")
######################################################
## Figura 1: Georreferenciación tiempos MEDELLÍN    ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
library(stringr)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
# -------- labels desde diccionario --------
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# -------- helpers de shape --------
leer_shape_si <- function(path){
if (file.exists(path)) sf::st_read(path, quiet = TRUE) else NULL
}
detectar_campo <- function(sfobj, candidatos){
if (is.null(sfobj)) return(NA_character_)
cand <- candidatos[candidatos %in% names(sfobj)]
if (length(cand)) cand[1] else NA_character_
}
# Shape con MUNICIPIOS del AMVA (usa el que tenga campo de municipio)
shp_amva_macro <- leer_shape_si("MACROZONAS.shp")
shp_amva_zonas <- leer_shape_si("ZONAS SIT.shp")
campo_mpio_macro <- detectar_campo(shp_amva_macro, c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO"))
campo_mpio_zonas <- detectar_campo(shp_amva_zonas, c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO"))
shape_amva <- if (!is.null(shp_amva_macro) && !is.na(campo_mpio_macro)) {
dplyr::rename(shp_amva_macro, p2_1_1 = !!sym(campo_mpio_macro))
} else if (!is.null(shp_amva_zonas) && !is.na(campo_mpio_zonas)) {
dplyr::rename(shp_amva_zonas, p2_1_1 = !!sym(campo_mpio_zonas))
} else {
stop("No encontré un campo de MUNICIPIO en los shapefiles (MACROZONAS/ZONAS SIT).")
}
# Conjunto de municipios AMVA
amva <- c("Medellín","Bello","Itagüí","Envigado","Sabaneta",
"La Estrella","Caldas","Copacabana","Girardota","Barbosa")
# -------- variables y filtros --------
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
base_amva <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 %in% amva, p40 %in% c("Hombre","Mujer")) %>%
# ya viene agregado por ciudad×género; solo dejamos una fila por par
distinct(p2_1_1, p40, across(all_of(vars_tiempo)))
pal_option <- "mako"  # si prefieres: "rocket" o "turbo"
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# unir a shape por MUNICIPIO
pinta <- dplyr::left_join(shape_amva, base_amva[, c("p2_1_1","p40", v)], by = "p2_1_1")
p <- ggplot(pinta) +
geom_sf(aes(fill = .data[[v]]), color = NA) +
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1, name = "Minutos",
na.value = "grey90") +
labs(
title = paste0(titulo_var, " — AMVA (por ciudad)"),
subtitle = "Valor reportado por municipio × género (sin promediar)"
) +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank(),
strip.text = element_text(face = "bold"))
ggsave(
filename = paste0(v, "_AMVA_ciudad_facet_HM.png"),
plot = p, width = 9, height = 6.5, dpi = 300, bg = "transparent"
)
}
######################################################
## Figura 1: Georreferenciación tiempos MEDELLÍN    ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# ---- Shapefile con municipios del AMVA ----
shape_amva <- st_read("MACROZONAS.shp", quiet = TRUE)
campo_mpio <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo_mpio <- campo_mpio[campo_mpio %in% names(shape_amva)][1]
if (is.na(campo_mpio)) {
shape_amva <- st_read("ZONAS SIT.shp", quiet = TRUE)
campo_mpio <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo_mpio <- campo_mpio[campo_mpio %in% names(shape_amva)][1]
if (is.na(campo_mpio)) stop("No encuentro el campo de municipio en el SHP.")
}
shape_amva <- dplyr::rename(shape_amva, p2_1_1 = !!sym(campo_mpio))
# Municipios del AMVA
amva <- c("Medellín","Bello","Itagüí","Envigado","Sabaneta",
"La Estrella","Caldas","Copacabana","Girardota","Barbosa")
shape_amva <- shape_amva %>% filter(p2_1_1 %in% amva)
# ---- Datos (ya agregados) H/M por ciudad ----
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
base_amva <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 %in% amva, p40 %in% c("Hombre","Mujer")) %>%
distinct(p2_1_1, p40, across(all_of(vars_tiempo)))   # sin promediar
pal_option <- "mako"  # puedes cambiar a "rocket" o "turbo"
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# unir valores al shape (puede haber municipios sin dato -> quedan NA)
pinta <- left_join(shape_amva, base_amva[, c("p2_1_1","p40", v)], by = "p2_1_1") %>%
rename(valor = !!v)
# Rango común de color por variable (sobre ambos géneros con dato)
lims <- range(pinta$valor, na.rm = TRUE)
# Capas: base gris (todo AMVA) + overlay de municipios con dato
base_gris <- pinta %>% mutate(dummy = 1) %>% group_by(dummy) %>% slice_head(n = n()) %>% ungroup()
p <- ggplot() +
geom_sf(data = base_gris, fill = "grey90", color = "white", size = 0.2) +  # todo AMVA
geom_sf(data = subset(pinta, !is.na(valor)),
aes(fill = valor), color = "white", size = 0.25) +                  # sólo con dato
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1,
limits = lims, name = "Minutos",
na.value = "grey90") +
labs(
title = paste0(titulo_var, " — AMVA (por ciudad)"),
subtitle = "Collage H/M: base gris = todo AMVA; color = ciudades con dato"
) +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank(),
strip.text = element_text(face = "bold"))
ggsave(
filename = paste0(v, "_AMVA_ciudad_facet_HM_collage.png"),
plot = p, width = 10, height = 6.8, dpi = 300, bg = "transparent"
)
}
######################################################
## Figura 1: Georreferenciación tiempos MEDELLÍN    ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
# -------- labels desde diccionario --------
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# -------- shapefile con municipios del AMVA --------
shape_amva <- st_read("MACROZONAS.shp", quiet = TRUE)
campo_mpio <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo_mpio <- campo_mpio[campo_mpio %in% names(shape_amva)][1]
if (is.na(campo_mpio)) {
shape_amva <- st_read("ZONAS SIT.shp", quiet = TRUE)
campo_mpio <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo_mpio <- campo_mpio[campo_mpio %in% names(shape_amva)][1]
if (is.na(campo_mpio)) stop("No encuentro el campo de municipio en el SHP.")
}
shape_amva <- dplyr::rename(shape_amva, p2_1_1 = !!sym(campo_mpio))
# Municipios del AMVA
amva <- c("Medellín","Bello","Itagüí","Envigado","Sabaneta",
"La Estrella","Caldas","Copacabana","Girardota","Barbosa")
shape_amva <- shape_amva %>% filter(p2_1_1 %in% amva)
# -------- datos (ya agregados) H/M por ciudad --------
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
base_amva <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 %in% amva, p40 %in% c("Hombre","Mujer")) %>%
distinct(p2_1_1, p40, across(all_of(vars_tiempo)))   # sin promediar
pal_option <- "mako"  # puedes cambiar a "rocket" o "turbo"
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# unir valores al shape
pinta <- left_join(shape_amva, base_amva[, c("p2_1_1","p40", v)], by = "p2_1_1") %>%
rename(valor = !!v)
# límites de color comunes (solo valores con dato)
lims <- range(pinta$valor, na.rm = TRUE)
# mapa
p <- ggplot() +
# base gris (toda el área)
geom_sf(data = shape_amva, fill = "grey90", color = "white", size = 0.25) +
# overlay coloreado solo donde hay valor
geom_sf(data = subset(pinta, !is.na(valor)),
aes(fill = valor), color = "white", size = 0.25) +
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1,
limits = lims, name = "Minutos", na.value = "grey90") +
labs(
title = paste0(titulo_var, " — AMVA (por ciudad)"),
subtitle = "Collage H/M: base gris = todo AMVA; color = ciudades con dato"
) +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank(),
strip.text = element_text(face = "bold"))
ggsave(
filename = paste0(v, "_AMVA_ciudad_facet_HM_collage.png"),
plot = p, width = 10, height = 6.8, dpi = 300, bg = "transparent"
)
}
######################################################
## Figura 1: Georreferenciación tiempos MEDELLÍN    ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
# -------- labels desde diccionario --------
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# -------- shapefile --------
shape_med <- st_read("ZONAS SIT.shp", quiet = TRUE)
campo_mpio <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo_mpio <- campo_mpio[campo_mpio %in% names(shape_med)][1]
if (is.na(campo_mpio)) stop("No encuentro campo de municipio en el SHP.")
shape_med <- rename(shape_med, p2_1_1 = !!sym(campo_mpio))
# filtra solo Medellín (por si el shape incluye otras)
shape_med <- shape_med %>% filter(p2_1_1 == "Medellín")
# -------- datos --------
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
base_med <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 == "Medellín", p40 %in% c("Hombre","Mujer")) %>%
distinct(p2_1_1, p40, across(all_of(vars_tiempo)))   # ya viene agregado
pal_option <- "mako"  # alternativa: "rocket" o "turbo"
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# une valores al shape (solo Medellín)
pinta <- left_join(shape_med, base_med[, c("p2_1_1","p40", v)], by = "p2_1_1") %>%
rename(valor = !!v)
lims <- range(pinta$valor, na.rm = TRUE)
p <- ggplot(pinta) +
geom_sf(aes(fill = valor), color = "white", size = 0.3) +
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1,
limits = lims, name = "Minutos",
na.value = "grey90") +
labs(
title = paste0(titulo_var, " — Medellín")
) +
theme_minimal(base_size = 11) +
theme(
panel.grid = element_blank(),
strip.text = element_text(face = "bold")
)
ggsave(
filename = paste0(v, "_Medellin_facet_HM.png"),
plot = p, width = 8, height = 5.8, dpi = 300, bg = "transparent"
)
}
######################################################
## Figura 1: Georreferenciación tiempos MEDELLÍN    ##
######################################################
library(readxl)
library(ggplot2)
library(dplyr)
library(viridis)
library(sf)
library(rlang)
library(stringr)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
dicc    <- readxl::read_excel("diccionario_med.xlsx")
# -------- labels desde diccionario --------
label_de <- function(var){
lbl <- tryCatch(dicc$descripcion[match(var, dicc$codigo)], error = function(e) NA)
if (is.na(lbl) || length(lbl)==0) return(var)
as.character(lbl)
}
# -------- shapefile: intenta MACROZONAS y si no, ZONAS SIT --------
leer_shape_mpio <- function(){
cand <- c("MACROZONAS.shp","ZONAS SIT.shp")
for (f in cand) if (file.exists(f)) {
sf <- suppressWarnings(st_read(f, quiet = TRUE))
campo <- c("Municipio","MUNICIPIO","MPIO","NOMBRE","NOM_MPIO")
campo <- campo[campo %in% names(sf)][1]
if (!is.na(campo)) return(rename(sf, p2_1_1 = !!sym(campo)))
}
stop("No encontré un SHP con campo de municipio (Municipio/MUNICIPIO/MPIO/NOMBRE/NOM_MPIO).")
}
shape_mpios <- leer_shape_mpio()
# 6 municipios a mostrar
m_seis <- c("Medellín","Bello","Itagüí","Envigado","Caldas","Barbosa")
# Filtra y DISUELVE por municipio (un polígono por ciudad)
shape_seis <- shape_mpios %>%
filter(p2_1_1 %in% m_seis) %>%
group_by(p2_1_1) %>%
summarise(geometry = st_union(geometry), .groups = "drop")
# -------- datos --------
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
stopifnot(all(vars_tiempo %in% names(dataset)))
stopifnot(all(c("p2_1_1","p40") %in% names(dataset)))
base <- dataset %>%
mutate(p2_1_1 = as.character(p2_1_1),
p40    = as.character(p40)) %>%
filter(p2_1_1 %in% m_seis, p40 %in% c("Hombre","Mujer")) %>%
distinct(p2_1_1, p40, across(all_of(vars_tiempo)))  # ya viene agregado
pal_option <- "mako"  # "rocket" o "turbo" si prefieres
for (v in vars_tiempo) {
titulo_var <- label_de(v)
# Unir valores al shape disuelto
pinta <- left_join(shape_seis, base[, c("p2_1_1","p40", v)], by = "p2_1_1") %>%
rename(valor = !!v)
# Rango común de color entre H/M (solo valores no-NA)
lims <- range(pinta$valor, na.rm = TRUE)
p <- ggplot() +
# base gris: los 6 municipios (sirve para ver dónde no hay dato)
geom_sf(data = shape_seis, fill = "grey90", color = "white", size = 0.25) +
# overlay: colorea SOLO donde hay valor para ese género
geom_sf(data = subset(pinta, !is.na(valor)), aes(fill = valor),
color = "white", size = 0.25) +
facet_wrap(~ p40) +
scale_fill_viridis_c(option = pal_option, direction = -1,
limits = lims, name = "Minutos",
na.value = "grey90") +
labs(title = paste0(titulo_var, " — 6 municipios")) +
theme_minimal(base_size = 11) +
theme(panel.grid = element_blank(),
strip.text = element_text(face = "bold"))
ggsave(
filename = paste0(v, "_6municipios_facet_HM.png"),
plot = p, width = 10, height = 6.8, dpi = 300, bg = "transparent"
)
}
######################################################
## Conteo de registros por municipio y variable     ##
######################################################
library(readxl)
library(dplyr)
setwd("C:\\Users\\danie\\OneDrive\\Escritorio\\Natura\\271025_Results_Med\\mapas\\Geo_AMVA\\")
dataset <- readxl::read_excel("clean_med_dataset_27102025.xlsx")
# municipios que te interesan
m_seis <- c("Medellín","Bello","Itagüí","Envigado","Caldas","Barbosa")
# variables a revisar
vars_tiempo <- c("p18","p18_p1","p18_p2","p18_p3","p18_p4","p18_c1")
# verificar que existan
stopifnot(all(c("p2_1_1", vars_tiempo) %in% names(dataset)))
# filtrar solo esos municipios
base <- dataset %>%
filter(p2_1_1 %in% m_seis)
# ---- opción 1: conteo total por municipio ----
conteo_total <- base %>%
summarise(across(all_of(vars_tiempo),
~sum(!is.na(.x)),
.names = "n_{.col}"),
.by = p2_1_1)
# ---- opción 2: conteo por municipio y género ----
if ("p40" %in% names(base)) {
conteo_genero <- base %>%
summarise(across(all_of(vars_tiempo),
~sum(!is.na(.x)),
.names = "n_{.col}"),
.by = c(p2_1_1, p40))
}
# ---- mostrar resultados ----
print("Conteo total por municipio:")
print(conteo_total)
if (exists("conteo_genero")) {
print("Conteo por municipio × género:")
print(conteo_genero)
}
View(conteo_genero)
